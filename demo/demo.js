(()=>{"use strict";var __webpack_modules__={643:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/libs/stats.module.js\nvar stats_module = __webpack_require__(304);\n;// CONCATENATED MODULE: ./dist/ColorableMergedModel.js\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\nclass ColorableMergedModel extends three_module/* Group */.ZAu {\n  constructor(option) {\n    super();\n    /**\n     * ジオメトリのグループIDを抽出する関数。\n     * セパレーターなどの書式が変わったら、この関数を上書きしてください。\n     *\n     * @param name\n     */\n    this.getGeometryID = name => {\n      const match = name.match(/.*_.*_(\\d*)/);\n      if (match == null) throw new Error(`Invalid name: ${name}`);\n      return Number(match[1]);\n    };\n    if (option.bodyOption != null) {\n      this.body = new ColorableMergedBody(option.bodyOption);\n      this.add(this.body);\n    }\n    if (option.edgeOption != null) {\n      this.edge = new ColorableMergedEdge(option.edgeOption);\n      this.add(this.edge);\n    }\n  }\n  addModel(geometry, id, type) {\n    var _a, _b;\n    (_a = this.body) === null || _a === void 0 ? void 0 : _a.addModel(geometry, id, type);\n    (_b = this.edge) === null || _b === void 0 ? void 0 : _b.addModel(geometry, id, type);\n  }\n  generate() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      yield Promise.all([(_a = this.body) === null || _a === void 0 ? void 0 : _a.generate(), (_b = this.edge) === null || _b === void 0 ? void 0 : _b.generate()]);\n    });\n  }\n  changeColor(param) {\n    var _a, _b;\n    if (param.bodyColor) {\n      (_a = this.body) === null || _a === void 0 ? void 0 : _a.colorMap.changeColor(param.bodyColor, param.id, {\n        type: param.type,\n        duration: param.duration,\n        easing: param.easing,\n        now: param.now\n      });\n    }\n    if (param.edgeColor) {\n      (_b = this.edge) === null || _b === void 0 ? void 0 : _b.colorMap.changeColor(param.edgeColor, param.id, {\n        type: param.type,\n        duration: param.duration,\n        easing: param.easing,\n        now: param.now\n      });\n    }\n  }\n}\nColorableMergedModel.MODEL_INDEX = "MODEL_INDEX";\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/utils/BufferGeometryUtils.js\nvar BufferGeometryUtils = __webpack_require__(993);\n;// CONCATENATED MODULE: ./dist/ColorableMergedBody.js\nvar ColorableMergedBody_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\n\nclass ColorableMergedBody extends three_module/* Mesh */.Kj0 {\n  constructor(option) {\n    super();\n    this.geometries = [];\n    this.geometryIDSet = new Set();\n    this.colorMap = new TweenableColorMap(this);\n    this.option = option;\n  }\n  addModel(geometry, id, type) {\n    const n = readGeometryCount(geometry);\n    const uniqueID = TweenableColorMap.getColorMapKey(id, type);\n    this.geometryIDSet.add(uniqueID);\n    const index = [...this.geometryIDSet].indexOf(uniqueID);\n    geometry.setAttribute(ColorableMergedModel.MODEL_INDEX, new three_module/* BufferAttribute */.TlE(new Uint16Array(new Array(n).fill(index)), 1));\n    geometry.deleteAttribute("uv");\n    this.geometries.push(geometry);\n    this.colorMap.addColor(this.option.color, id, type);\n  }\n  generate() {\n    return ColorableMergedBody_awaiter(this, void 0, void 0, function* () {\n      if (this.geometries.length === 0) return;\n      this.geometry = BufferGeometryUtils/* mergeGeometries */.n4(this.geometries);\n      this.material = new ColorableMergedBodyMaterial(this.geometryIDSet.size, this.option.materialSetting);\n      this.colorMap.forceUpdateColorAttribute();\n    });\n  }\n}\n;// CONCATENATED MODULE: ./dist/ColorableMergedEdge.js\nvar ColorableMergedEdge_awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\n\n\nclass ColorableMergedEdge extends three_module/* LineSegments */.ejS {\n  constructor(option) {\n    var _a;\n    super();\n    this.geometries = [];\n    this.geometryIDSet = new Set();\n    this.colorMap = new TweenableColorMap(this);\n    this.option = option;\n    this.option.edgeDetail = (_a = option.edgeDetail) !== null && _a !== void 0 ? _a : 7;\n  }\n  addModel(geometry, id, type) {\n    const uniqueID = TweenableColorMap.getColorMapKey(id, type);\n    this.geometryIDSet.add(uniqueID);\n    const index = [...this.geometryIDSet].indexOf(uniqueID);\n    const edge = new three_module/* EdgesGeometry */.TOt(geometry, this.option.edgeDetail);\n    const n = readGeometryCount(edge);\n    edge.setAttribute(ColorableMergedModel.MODEL_INDEX, new three_module/* BufferAttribute */.TlE(new Uint16Array(n).fill(index), 1));\n    this.geometries.push(edge);\n    this.colorMap.addColor(this.option.color, id, type);\n  }\n  generate() {\n    return ColorableMergedEdge_awaiter(this, void 0, void 0, function* () {\n      if (this.geometries.length === 0) return;\n      this.geometry = BufferGeometryUtils/* mergeGeometries */.n4(this.geometries);\n      this.material = new ColorableMergedEdgeMaterial(this.geometryIDSet.size, this.option.materialSetting);\n      this.colorMap.forceUpdateColorAttribute();\n    });\n  }\n}\n;// CONCATENATED MODULE: ./dist/MergedModelUtil.js\nfunction readGeometryCount(geometry) {\n  return geometry.getAttribute("position").count;\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/tweenable-color/esm/index.js + 6 modules\nvar esm = __webpack_require__(333);\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(984);\n// EXTERNAL MODULE: ./node_modules/eventemitter3/index.mjs\nvar eventemitter3 = __webpack_require__(146);\n;// CONCATENATED MODULE: ./dist/TweenableColorMap.js\n\n\n\nclass TweenableColorMap extends eventemitter3/* EventEmitter */.v {\n  constructor(model) {\n    super();\n    this.model = model;\n    this.colors = new Map();\n    this.needUpdateColors = false;\n    this.onChangedColor = () => {\n      this.needUpdateColors = true;\n    };\n    this.updateColorAttribute = () => {\n      if (!this.needUpdateColors) return;\n      this.needUpdateColors = false;\n      this.forceUpdateColorAttribute();\n    };\n    this.forceUpdateColorAttribute = () => {\n      const mat = this.model.material;\n      let count = 0;\n      this.colors.forEach(value => {\n        const colorArray = value.getAttribute();\n        mat.setColor(count, colorArray);\n        count++;\n      });\n      this.model.material.needsUpdate = true;\n    };\n    this.model.onBeforeRender = this.updateColorAttribute;\n    esm/* TweenableColorTicker */.k7.start();\n  }\n  static getColorMapKey(id, type = "default") {\n    return `${type}__${id}`;\n  }\n  addColor(defaultColor, id, type) {\n    const color = defaultColor;\n    const tweenableColor = new esm/* TweenableColor */.ZM(color[0] * 255, color[1] * 255, color[2] * 255, color[3]);\n    this.set(tweenableColor, id, type);\n  }\n  set(color, id, type) {\n    this.colors.set(TweenableColorMap.getColorMapKey(id, type), color);\n    color.on("onUpdate", this.onChangedColor);\n  }\n  get(id, type) {\n    return this.colors.get(TweenableColorMap.getColorMapKey(id, type));\n  }\n  /**\n   * 指定されたジオメトリの色を変更する\n   * @param id\n   * @param color\n   * @param option\n   */\n  changeColor(color, id, option) {\n    var _a, _b, _c;\n    option = option !== null && option !== void 0 ? option : {};\n    (_a = option.now) !== null && _a !== void 0 ? _a : option.now = performance.now();\n    (_b = option.duration) !== null && _b !== void 0 ? _b : option.duration = 1000;\n    (_c = option.easing) !== null && _c !== void 0 ? _c : option.easing = tween_esm/* Easing */.oY.Cubic.Out;\n    const tweenableColor = this.get(id, option === null || option === void 0 ? void 0 : option.type);\n    tweenableColor === null || tweenableColor === void 0 ? void 0 : tweenableColor.change(color[0] * 255, color[1] * 255, color[2] * 255, color[3], option.duration, {\n      easing: option.easing,\n      startTime: option.now\n    });\n  }\n}\n;// CONCATENATED MODULE: ./dist/material/ColorableMergedBodyMaterial.glsl.js\n//language=GLSL\nconst vertex = /* glsl */`\n#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nattribute float MODEL_INDEX;\nvarying float colorTableIndex;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n  \n  colorTableIndex = MODEL_INDEX;\n}\n`;\n//language=GLSL\nconst fragment = /* glsl */`\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying float colorTableIndex;\nuniform vec4[INDEX] colors;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n  //#include <color_fragment>\n  diffuseColor *= colors[int(colorTableIndex)];\n    \n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n`;\n;// CONCATENATED MODULE: ./dist/material/ColorableMergedBodyMaterial.js\n\n\nclass ColorableMergedBodyMaterial extends three_module/* ShaderMaterial */.jyz {\n  constructor(colorsLength, param) {\n    var _a, _b;\n    super({\n      vertexShader: vertex,\n      fragmentShader: fragment\n    });\n    this.defines = {\n      INDEX: colorsLength\n    };\n    this.uniforms = ColorableMergedBodyMaterial.getBasicUniforms(colorsLength);\n    this.transparent = true;\n    this.blending = (_a = param === null || param === void 0 ? void 0 : param.blending) !== null && _a !== void 0 ? _a : three_module/* NormalBlending */.bdR;\n    this.side = (_b = param === null || param === void 0 ? void 0 : param.side) !== null && _b !== void 0 ? _b : three_module/* FrontSide */.Wl3;\n  }\n  /**\n   * このMaterialに必要なuniformsを生成する。\n   *\n   * @see https://github.com/mrdoob/three.js/blob/0c26bb4bb8220126447c8373154ac045588441de/src/renderers/shaders/ShaderLib.js#L11\n   */\n  static getBasicUniforms(colorsCount) {\n    const colors = new Array(colorsCount).fill(0).map(() => new three_module/* Vector4 */.Ltg(1, 1, 1, 0.5));\n    return three_module/* UniformsUtils */.rDY.merge([three_module/* UniformsLib */.rBU.common, three_module/* UniformsLib */.rBU.specularmap, three_module/* UniformsLib */.rBU.envmap, three_module/* UniformsLib */.rBU.aomap, three_module/* UniformsLib */.rBU.lightmap, three_module/* UniformsLib */.rBU.fog, {\n      colors: {\n        value: colors\n      }\n    }]);\n  }\n  setColor(index, color) {\n    const colors = this.uniforms.colors.value;\n    colors[index].set(color[0], color[1], color[2], color[3]);\n  }\n}\n;// CONCATENATED MODULE: ./dist/material/ColorableMergedEdgeMaterial.glsl.js\n//language=GLSL\nconst ColorableMergedEdgeMaterial_glsl_vertex = /* glsl */`\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nattribute float MODEL_INDEX;\nvarying float colorTableIndex;\n\nvoid main() {\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n    \n  colorTableIndex = MODEL_INDEX;\n}\n`;\n//language=GLSL\nconst ColorableMergedEdgeMaterial_glsl_fragment = /* glsl */`\nuniform vec3 diffuse;\nuniform float opacity;\n\nuniform float dashSize;\nuniform float totalSize;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying float colorTableIndex;\nuniform vec4[INDEX] colors;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\n\t\tdiscard;\n\n\t}\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t//#include <color_fragment>\n  diffuseColor *= colors[int(colorTableIndex)];\n    \n  outgoingLight = diffuseColor.rgb; // simple shader\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}\n`;\n;// CONCATENATED MODULE: ./dist/material/ColorableMergedEdgeMaterial.js\n\n\nclass ColorableMergedEdgeMaterial extends three_module/* ShaderMaterial */.jyz {\n  constructor(colorLength, param) {\n    var _a;\n    super({\n      vertexShader: ColorableMergedEdgeMaterial_glsl_vertex,\n      fragmentShader: ColorableMergedEdgeMaterial_glsl_fragment\n    });\n    this.defines = {\n      INDEX: colorLength\n    };\n    this.uniforms = ColorableMergedEdgeMaterial.getBasicUniforms(colorLength);\n    this.depthWrite = (_a = param === null || param === void 0 ? void 0 : param.depthWrite) !== null && _a !== void 0 ? _a : true;\n    this.transparent = true;\n  }\n  /**\n   * このMaterialに必要なuniformsを生成する。\n   *\n   * @see https://github.com/mrdoob/three.js/blob/0c26bb4bb8220126447c8373154ac045588441de/src/renderers/shaders/ShaderLib.js#L11\n   */\n  static getBasicUniforms(colorLength) {\n    const colors = new Array(colorLength).fill(0).map(() => new three_module/* Vector4 */.Ltg(1, 1, 1, 0.5));\n    return three_module/* UniformsUtils */.rDY.merge([three_module/* UniformsLib */.rBU.common, three_module/* UniformsLib */.rBU.fog, {\n      scale: {\n        value: 1\n      },\n      dashSize: {\n        value: 1\n      },\n      totalSize: {\n        value: 2\n      }\n    }, {\n      colors: {\n        value: colors\n      }\n    }]);\n  }\n  setColor(index, color) {\n    const colors = this.uniforms.colors.value;\n    colors[index].set(color[0], color[1], color[2], color[3]);\n  }\n}\n;// CONCATENATED MODULE: ./dist/material/index.js\n\n\n\n;// CONCATENATED MODULE: ./dist/index.js\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo.ts\n\n\n\n\nvar onDomContentsLoaded = function () {\n    var w = 1280;\n    var h = 720;\n    var scene = new three_module/* Scene */.xsS();\n    var camera = new three_module/* PerspectiveCamera */.cPb(45, w / h, 1, 60000);\n    camera.position.set(0, 0, 15);\n    var renderer = new three_module/* WebGLRenderer */.CP7({ antialias: true });\n    renderer.setSize(w, h);\n    document.body.appendChild(renderer.domElement);\n    var rendererInfo = document.createElement("div");\n    document.body.appendChild(rendererInfo);\n    var controls = new OrbitControls/* OrbitControls */.z(camera, renderer.domElement);\n    var stats = new stats_module/* default */.Z();\n    var rendering = function () {\n        stats.begin();\n        renderer.render(scene, camera);\n        stats.end();\n        rendererInfo.innerText = JSON.stringify(renderer.info.render);\n        renderer.render(scene, camera);\n        requestAnimationFrame(rendering);\n    };\n    rendering();\n    var model = new ColorableMergedModel({\n        bodyOption: { color: [1, 1, 1, 0.2] },\n        edgeOption: { color: [1, 1, 1, 0.8] },\n    });\n    scene.add(model);\n    var n = 20;\n    for (var x = 0; x < n; x++) {\n        for (var y = 0; y < n; y++) {\n            var _loop_1 = function (z) {\n                var size = 0.1;\n                var geo = new three_module/* BoxGeometry */.DvJ(size, size, size);\n                var getQuadrant = function (i) {\n                    return i < n / 2 ? -1 : 1;\n                };\n                var index = getQuadrant(x) * getQuadrant(y) * getQuadrant(z);\n                var calcPos = function (i) {\n                    return (i - n / 2) * (size * 3);\n                };\n                geo.translate(calcPos(x), calcPos(y), calcPos(z));\n                model.addModel(geo, index);\n            };\n            for (var z = 0; z < n; z++) {\n                _loop_1(z);\n            }\n        }\n    }\n    model.generate();\n    var isOn = true;\n    var switchColor = function () {\n        isOn = !isOn;\n        var OnBodyColor = [1, 1, 1, 0.2];\n        var OffBodyColor01 = [1, 0, 0, 0.2];\n        var OffBodyColor02 = [0, 1, 0, 0.2];\n        var OnEdgeColor = [1, 1, 1, 0.8];\n        var OffEdgeColor01 = [1, 0, 0, 0.8];\n        var OffEdgeColor02 = [0, 1, 0, 0.8];\n        model.changeColor({\n            bodyColor: isOn ? OnBodyColor : OffBodyColor01,\n            edgeColor: isOn ? OnEdgeColor : OffEdgeColor01,\n            id: 1,\n        });\n        model.changeColor({\n            bodyColor: isOn ? OnBodyColor : OffBodyColor02,\n            edgeColor: isOn ? OnEdgeColor : OffEdgeColor02,\n            id: -1,\n        });\n    };\n    setInterval(switchColor, 3000);\n    switchColor();\n};\nwindow.onload = onDomContentsLoaded;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///643\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(g=0;g<deferred.length;g++){for(var[U,F,B]=deferred[g],l=!0,n=0;n<U.length;n++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[n])))?U.splice(n--,1):(l=!1,B<s&&(s=B));if(l){deferred.splice(g--,1);var e=F();void 0!==e&&(Q=e)}}return Q}B=B||0;for(var g=deferred.length;g>0&&deferred[g-1][2]>B;g--)deferred[g]=deferred[g-1];deferred[g]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={577:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[l,n,e]=F,g=0;if(l.some((U=>0!==Q[U]))){for(B in n)__webpack_require__.o(n,B)&&(__webpack_require__.m[B]=n[B]);if(e)var I=e(__webpack_require__)}for(U&&U(F);g<l.length;g++)s=l[g],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(I)},F=self.webpackChunk_masatomakino_colorable_merged_model=self.webpackChunk_masatomakino_colorable_merged_model||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(643)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();