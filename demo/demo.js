(()=>{"use strict";var __webpack_modules__={214:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ ColorSwitcher)\n/* harmony export */ });\nclass ColorSwitcher {\n    constructor(model) {\n        this.model = model;\n        this.isOn = true;\n        this.switchColor = () => {\n            this.isOn = !this.isOn;\n            const OnBodyColor = [1, 1, 1, 0.2];\n            const OffBodyColor01 = [1, 0, 0, 0.2];\n            const OffBodyColor02 = [0, 1, 0, 0.2];\n            const OnEdgeColor = [1, 1, 1, 0.8];\n            const OffEdgeColor01 = [1, 0, 0, 0.8];\n            const OffEdgeColor02 = [0, 1, 0, 0.8];\n            const bodyMaterial = this.model.body\n                ?.material;\n            bodyMaterial.colors.changeColor(this.isOn ? OnBodyColor : OffBodyColor01, 1);\n            bodyMaterial.colors.changeColor(this.isOn ? OnBodyColor : OffBodyColor02, -1);\n            const edgeMaterial = this.model.edge\n                ?.material;\n            edgeMaterial.colors.changeColor(this.isOn ? OnEdgeColor : OffEdgeColor01, 1);\n            edgeMaterial.colors.changeColor(this.isOn ? OnEdgeColor : OffEdgeColor02, -1);\n        };\n        setInterval(this.switchColor, 3000);\n        this.switchColor();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE0LmpzIiwibWFwcGluZ3MiOiI7OztBQU1PLE1BQU0sYUFBYTtJQUd4QixZQUFvQixLQUEwQjtRQUExQixVQUFLLEdBQUwsS0FBSyxDQUFxQjtRQUZ0QyxTQUFJLEdBQVksSUFBSSxDQUFDO1FBT3JCLGdCQUFXLEdBQUcsR0FBRyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBRXZCLE1BQU0sV0FBVyxHQUFxQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3JFLE1BQU0sY0FBYyxHQUFxQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3hFLE1BQU0sY0FBYyxHQUFxQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBRXhFLE1BQU0sV0FBVyxHQUFxQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3JFLE1BQU0sY0FBYyxHQUFxQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3hFLE1BQU0sY0FBYyxHQUFxQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBRXhFLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSTtnQkFDbEMsRUFBRSxRQUF1QyxDQUFDO1lBQzVDLFlBQVksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLGNBQWMsRUFDeEMsQ0FBQyxDQUNGLENBQUM7WUFDRixZQUFZLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQ3hDLENBQUMsQ0FBQyxDQUNILENBQUM7WUFFRixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7Z0JBQ2xDLEVBQUUsUUFBdUMsQ0FBQztZQUM1QyxZQUFZLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQ3hDLENBQUMsQ0FDRixDQUFDO1lBQ0YsWUFBWSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUN4QyxDQUFDLENBQUMsQ0FDSCxDQUFDO1FBQ0osQ0FBQyxDQUFDO1FBcENBLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0NBbUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9jb2xvcmFibGUtbWVyZ2VkLW1vZGVsLy4vZGVtb1NyYy9Db2xvclN3aXRjaGVyLnRzP2M4NjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29sb3JhYmxlTWVyZ2VkQm9keU1hdGVyaWFsLFxuICBDb2xvcmFibGVNZXJnZWRWaWV3LFxuICBDb2xvcmFibGVNZXJnZWRFZGdlTWF0ZXJpYWwsXG59IGZyb20gXCIuLi9zcmMvaW5kZXguanNcIjtcblxuZXhwb3J0IGNsYXNzIENvbG9yU3dpdGNoZXIge1xuICBwcml2YXRlIGlzT246IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbW9kZWw6IENvbG9yYWJsZU1lcmdlZFZpZXcpIHtcbiAgICBzZXRJbnRlcnZhbCh0aGlzLnN3aXRjaENvbG9yLCAzMDAwKTtcbiAgICB0aGlzLnN3aXRjaENvbG9yKCk7XG4gIH1cblxuICBwcml2YXRlIHN3aXRjaENvbG9yID0gKCkgPT4ge1xuICAgIHRoaXMuaXNPbiA9ICF0aGlzLmlzT247XG5cbiAgICBjb25zdCBPbkJvZHlDb2xvcjogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPSBbMSwgMSwgMSwgMC4yXTtcbiAgICBjb25zdCBPZmZCb2R5Q29sb3IwMTogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPSBbMSwgMCwgMCwgMC4yXTtcbiAgICBjb25zdCBPZmZCb2R5Q29sb3IwMjogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPSBbMCwgMSwgMCwgMC4yXTtcblxuICAgIGNvbnN0IE9uRWRnZUNvbG9yOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9IFsxLCAxLCAxLCAwLjhdO1xuICAgIGNvbnN0IE9mZkVkZ2VDb2xvcjAxOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9IFsxLCAwLCAwLCAwLjhdO1xuICAgIGNvbnN0IE9mZkVkZ2VDb2xvcjAyOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9IFswLCAxLCAwLCAwLjhdO1xuXG4gICAgY29uc3QgYm9keU1hdGVyaWFsID0gdGhpcy5tb2RlbC5ib2R5XG4gICAgICA/Lm1hdGVyaWFsIGFzIENvbG9yYWJsZU1lcmdlZEJvZHlNYXRlcmlhbDtcbiAgICBib2R5TWF0ZXJpYWwuY29sb3JzLmNoYW5nZUNvbG9yKFxuICAgICAgdGhpcy5pc09uID8gT25Cb2R5Q29sb3IgOiBPZmZCb2R5Q29sb3IwMSxcbiAgICAgIDEsXG4gICAgKTtcbiAgICBib2R5TWF0ZXJpYWwuY29sb3JzLmNoYW5nZUNvbG9yKFxuICAgICAgdGhpcy5pc09uID8gT25Cb2R5Q29sb3IgOiBPZmZCb2R5Q29sb3IwMixcbiAgICAgIC0xLFxuICAgICk7XG5cbiAgICBjb25zdCBlZGdlTWF0ZXJpYWwgPSB0aGlzLm1vZGVsLmVkZ2VcbiAgICAgID8ubWF0ZXJpYWwgYXMgQ29sb3JhYmxlTWVyZ2VkRWRnZU1hdGVyaWFsO1xuICAgIGVkZ2VNYXRlcmlhbC5jb2xvcnMuY2hhbmdlQ29sb3IoXG4gICAgICB0aGlzLmlzT24gPyBPbkVkZ2VDb2xvciA6IE9mZkVkZ2VDb2xvcjAxLFxuICAgICAgMSxcbiAgICApO1xuICAgIGVkZ2VNYXRlcmlhbC5jb2xvcnMuY2hhbmdlQ29sb3IoXG4gICAgICB0aGlzLmlzT24gPyBPbkVkZ2VDb2xvciA6IE9mZkVkZ2VDb2xvcjAyLFxuICAgICAgLTEsXG4gICAgKTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///214\n")},209:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  B: () => (/* binding */ generateModel)\n});\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n;// CONCATENATED MODULE: ./src/ColorableMergedView.ts\n\n\n/**\n * 色変更が可能なモデル。\n *\n * 半透明なモデルと、エッジの組み合わせで構成される。\n * それぞれに対して、色変更アニメーションができる。\n */\nclass ColorableMergedView extends three_module/* Group */.ZAu {\n    constructor(option) {\n        super();\n        /**\n         * ジオメトリのグループIDを抽出する関数。\n         * セパレーターなどの書式が変わったら、この関数を上書きしてください。\n         *\n         * @param name\n         */\n        this.getGeometryID = (name) => {\n            const match = name.match(/.*_.*_(\\d*)/);\n            if (match == null)\n                throw new Error(`Invalid name: ${name}`);\n            return Number(match[1]);\n        };\n        if (option.bodyOption != null) {\n            this.body = new ColorableMergedBody(option.bodyOption);\n            this.add(this.body);\n        }\n        if (option.edgeOption != null) {\n            this.edge = new ColorableMergedEdge(option.edgeOption);\n            this.add(this.edge);\n        }\n    }\n    async merge() {\n        await Promise.all([\n            this.body?.geometryMerger.merge(),\n            this.edge?.geometryMerger.merge(),\n        ]);\n    }\n}\nColorableMergedView.MODEL_INDEX = "MODEL_INDEX";\n\n;// CONCATENATED MODULE: ./src/ColorableMergedBody.ts\n\n\nclass ColorableMergedBody extends three_module/* Mesh */.Kj0 {\n    constructor(option) {\n        super();\n        this.geometryMerger = new BodyGeometryMerger(this, option);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/ColorableMergedEdge.ts\n\n\nclass ColorableMergedEdge extends three_module/* LineSegments */.ejS {\n    constructor(option) {\n        super();\n        option.edgeDetail = option.edgeDetail ?? 7;\n        this.geometryMerger = new EdgeGeometryMerger(this, option);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/MergedModelUtil.ts\nfunction readGeometryCount(geometry) {\n    return geometry.getAttribute("position").count;\n}\n\n// EXTERNAL MODULE: ./node_modules/@masatomakino/tweenable-color/esm/index.js + 6 modules\nvar esm = __webpack_require__(333);\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(984);\n// EXTERNAL MODULE: ./node_modules/eventemitter3/index.mjs\nvar eventemitter3 = __webpack_require__(146);\n;// CONCATENATED MODULE: ./src/TweenableColorMap.ts\n\n\n\nclass TweenableColorMap extends eventemitter3/* EventEmitter */.v {\n    /**\n     * コンストラクタ\n     * @param uniformName このColorMapが操作するuniform名。ShaderMaterialを継承した場合、マテリアル側に同名のuniformが必要。\n     */\n    constructor(uniformName) {\n        super();\n        this.uniformName = uniformName;\n        this.colors = new Map();\n        esm/* TweenableColorTicker */.k7.start();\n    }\n    setMaterial(material) {\n        this.material = material;\n    }\n    static getColorMapKey(id) {\n        return `${id}`;\n    }\n    add(defaultColor, id) {\n        const tweenableColor = new esm/* TweenableColor */.ZM(defaultColor[0] * 255, defaultColor[1] * 255, defaultColor[2] * 255, defaultColor[3]);\n        this.colors.set(TweenableColorMap.getColorMapKey(id), tweenableColor);\n        tweenableColor.on("onUpdate", () => {\n            this.updateUniform(tweenableColor);\n        });\n    }\n    get(id) {\n        return this.colors.get(TweenableColorMap.getColorMapKey(id));\n    }\n    getUniformIndex(id) {\n        return [...this.colors.keys()].indexOf(TweenableColorMap.getColorMapKey(id));\n    }\n    getUniformIndexFromColor(color) {\n        return [...this.colors.values()].indexOf(color);\n    }\n    getSize() {\n        return this.colors.size;\n    }\n    /**\n     * 指定されたidの色を変更する。\n     * @param id\n     * @param color max 1.0 ~ min 0.0 [r, g, b, a]\n     * @param option\n     */\n    changeColor(color, id, option) {\n        option = option ?? {};\n        option.now ??= performance.now();\n        option.duration ??= 1000;\n        option.easing ??= tween_esm/* Easing */.oY.Cubic.Out;\n        const tweenableColor = this.get(id);\n        tweenableColor?.change(color[0] * 255, color[1] * 255, color[2] * 255, color[3], option.duration, { easing: option.easing, startTime: option.now });\n    }\n    updateUniformsAll() {\n        this.colors.forEach((color) => {\n            this.updateUniform(color);\n        });\n    }\n    /**\n     * このカラーマップに紐づけられたマテリアルのuniformを更新する。\n     * 対象となるuniformは、uniformNameで指定されたもの。\n     *\n     * @param tweenableColor\n     * @private\n     */\n    updateUniform(tweenableColor) {\n        if (this.material == null)\n            return;\n        if ("updateUniform" in this.material) {\n            this.material.updateUniform(tweenableColor);\n            return;\n        }\n        const colorUniform = this.material.uniforms[this.uniformName]\n            .value;\n        if (colorUniform == null) {\n            console.error(`対象のマテリアルに、${this.uniformName}という名前のuniformが存在しません。${this.material.name}のuniform生成処理にこの名前のuniformを追加してください。`);\n            return;\n        }\n        const index = this.getUniformIndexFromColor(tweenableColor);\n        const colorAttribute = tweenableColor.getAttribute();\n        colorUniform[index].set(...colorAttribute);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedMaterial.ts\n\nclass ColorableMergedMaterial extends three_module/* ShaderMaterial */.jyz {\n    constructor(param, colorsLength) {\n        super(param);\n        this.isColorableMergedMaterial = true;\n        this.initDefine = (colorsLength) => {\n            this.defines = {\n                INDEX: colorsLength, // TODO rename to COLORS_LENGTH\n            };\n        };\n        if (colorsLength === 0) {\n            throw new Error(`ColorableMergedMaterialには少なくとも1つ以上のTweenableColorが必要です。\n        このMaterialに紐づけられたTweenableColoMapには1つもTweenableColorが登録されていません。`);\n        }\n        this.isColorableMergedMaterial = true;\n        this.initDefine(colorsLength);\n    }\n    static getColorUniform(colorLength) {\n        const colors = new Array(colorLength)\n            .fill(0)\n            .map(() => new three_module/* Vector4 */.Ltg(1, 1, 1, 0.5));\n        return {\n            colors: { value: colors },\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedBodyMaterial.glsl.ts\n//language=GLSL\nconst vertex = /* glsl */ `\n#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nattribute float MODEL_INDEX;\nvarying float colorTableIndex;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n  \n  colorTableIndex = MODEL_INDEX;\n}\n`;\n//language=GLSL\nconst fragment = /* glsl */ `\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying float colorTableIndex;\nuniform vec4[INDEX] colors;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n  //#include <color_fragment>\n  diffuseColor *= colors[int(colorTableIndex)];\n    \n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n`;\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedBodyMaterial.ts\n\n\n\nclass ColorableMergedBodyMaterial extends ColorableMergedMaterial {\n    constructor(colors, param) {\n        super({\n            vertexShader: vertex,\n            fragmentShader: fragment,\n        }, colors.getSize());\n        this.colors = colors;\n        this.uniforms = ColorableMergedBodyMaterial.getBasicUniforms(colors.getSize());\n        this.transparent = true;\n        this.blending = param?.blending ?? three_module/* NormalBlending */.bdR;\n        this.side = param?.side ?? three_module/* FrontSide */.Wl3;\n        colors.setMaterial(this);\n        colors.updateUniformsAll();\n    }\n    /**\n     * このMaterialに必要なuniformsを生成する。\n     *\n     * @see https://github.com/mrdoob/three.js/blob/0c26bb4bb8220126447c8373154ac045588441de/src/renderers/shaders/ShaderLib.js#L11\n     */\n    static getBasicUniforms(colorsCount) {\n        return three_module/* UniformsUtils */.rDY.merge([\n            three_module/* UniformsLib */.rBU.common,\n            three_module/* UniformsLib */.rBU.specularmap,\n            three_module/* UniformsLib */.rBU.envmap,\n            three_module/* UniformsLib */.rBU.aomap,\n            three_module/* UniformsLib */.rBU.lightmap,\n            three_module/* UniformsLib */.rBU.fog,\n            ColorableMergedMaterial.getColorUniform(colorsCount),\n        ]);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedEdgeMaterial.glsl.ts\n//language=GLSL\nconst ColorableMergedEdgeMaterial_glsl_vertex = /* glsl */ `\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nattribute float MODEL_INDEX;\nvarying float colorTableIndex;\n\nvoid main() {\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n    \n  colorTableIndex = MODEL_INDEX;\n}\n`;\n//language=GLSL\nconst ColorableMergedEdgeMaterial_glsl_fragment = /* glsl */ `\nuniform vec3 diffuse;\nuniform float opacity;\n\nuniform float dashSize;\nuniform float totalSize;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying float colorTableIndex;\nuniform vec4[INDEX] colors;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\n\t\tdiscard;\n\n\t}\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t//#include <color_fragment>\n  diffuseColor *= colors[int(colorTableIndex)];\n    \n  outgoingLight = diffuseColor.rgb; // simple shader\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}\n`;\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedEdgeMaterial.ts\n\n\n\nclass ColorableMergedEdgeMaterial extends ColorableMergedMaterial {\n    constructor(colors, param) {\n        super({\n            vertexShader: ColorableMergedEdgeMaterial_glsl_vertex,\n            fragmentShader: ColorableMergedEdgeMaterial_glsl_fragment,\n        }, colors.getSize());\n        this.colors = colors;\n        this.uniforms = ColorableMergedEdgeMaterial.getBasicUniforms(colors.getSize());\n        this.depthWrite = param?.depthWrite ?? true;\n        this.transparent = true;\n        colors.setMaterial(this);\n        colors.updateUniformsAll();\n    }\n    /**\n     * このMaterialに必要なuniformsを生成する。\n     *\n     * @see https://github.com/mrdoob/three.js/blob/0c26bb4bb8220126447c8373154ac045588441de/src/renderers/shaders/ShaderLib.js#L11\n     */\n    static getBasicUniforms(colorLength) {\n        return three_module/* UniformsUtils */.rDY.merge([\n            three_module/* UniformsLib */.rBU.common,\n            three_module/* UniformsLib */.rBU.fog,\n            {\n                scale: { value: 1 },\n                dashSize: { value: 1 },\n                totalSize: { value: 2 },\n            },\n            ColorableMergedMaterial.getColorUniform(colorLength),\n        ]);\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/nodes/Nodes.js + 189 modules\nvar Nodes = __webpack_require__(764);\n;// CONCATENATED MODULE: ./src/material/ColorableMergedBodyNodeMaterial.ts\n\n\n\nclass ColorableMergedBodyNodeMaterial extends Nodes/* MeshBasicNodeMaterial */.AEy {\n    constructor(colors, param) {\n        super();\n        this.colors = colors;\n        this.isColorableMergedMaterial = true;\n        this.indexedColors = [];\n        this.colorConverter = new three_module/* Color */.Ilk();\n        if (colors.getSize() === 0) {\n            throw new Error(`ColorableMergedNodeMaterialには少なくとも1つ以上のTweenableColorが必要です。\n          このMaterialに紐づけられたTweenableColoMapには1つもTweenableColorが登録されていません。`);\n        }\n        this.indexedColors = ColorableMergedBodyNodeMaterial.initColorUniformArray(colors.getSize());\n        this.uniformsColorArray =\n            ColorableMergedBodyNodeMaterial.initUniformsColorArray(this.indexedColors);\n        const colorElement = this.uniformsColorArray.element((0,Nodes/* attribute */.A1o)(ColorableMergedView.MODEL_INDEX));\n        this.colorNode = Nodes/* materialColor */.ujg.mul(colorElement.xyz);\n        this.opacityNode = Nodes/* materialOpacity */.pIc.mul(colorElement.w);\n        this.transparent = true;\n        this.blending = param?.blending ?? three_module/* NormalBlending */.bdR;\n        this.side = param?.side ?? three_module/* FrontSide */.Wl3;\n        this.colorSpace = param?.colorSpace ?? "srgb";\n        this.applyGammaToAlpha = param?.applyGammaToAlpha ?? false;\n        colors.setMaterial(this);\n        colors.updateUniformsAll();\n    }\n    static initColorUniformArray(colorLength) {\n        return Array.from({ length: colorLength }, () => new three_module/* Vector4 */.Ltg(1, 1, 1, 1));\n    }\n    static initUniformsColorArray(vec4Array) {\n        return (0,Nodes/* uniforms */.juw)(vec4Array, "vec4");\n    }\n    /**\n     * 指定されたuniformを更新する。\n     * @param tweenableColor\n     */\n    updateUniform(tweenableColor) {\n        ColorableMergedBodyNodeMaterial.updateUniform(this.colors, tweenableColor, this.indexedColors, this.colorSpace, this.applyGammaToAlpha, this.colorConverter);\n    }\n    /**\n     * 指定されたuniformを更新する。\n     *\n     * @param colorMap\n     *   tweenableColorMapインスタンス\n     * @param tweenableColor\n     *   更新するTweenableColorインスタンス。TweenableColorMapに登録されている必要がある。\n     * @param indexedColors\n     *   マテリアルのuniformに設定されているVector4配列\n     * @param colorSpace\n     *   colorSpace色空間が指定されている場合、RGBAの各要素をワーキングカラースペースに変換する。\n     * @param applyGammaToAlpha\n     *   アルファチャンネルを色空間の変換対象にするか否か。\n     * @param colorTransform\n     *   colorSpaceが指定されている場合に、色空間の変換に使うColorインスタンス。\n     *   再利用のために引数で渡すことを推奨する。\n     */\n    static updateUniform(colorMap, tweenableColor, indexedColors, colorSpace, applyGammaToAlpha, colorTransform) {\n        const index = colorMap.getUniformIndexFromColor(tweenableColor);\n        const colorAttribute = tweenableColor.getAttribute();\n        const targetVec4 = indexedColors[index];\n        targetVec4.set(...colorAttribute);\n        if (colorSpace != null && colorSpace !== "") {\n            colorTransform ??= new three_module/* Color */.Ilk();\n            colorTransform.setRGB(colorAttribute[0], colorAttribute[1], colorAttribute[2], colorSpace);\n            targetVec4.setX(colorTransform.r);\n            targetVec4.setY(colorTransform.g);\n            targetVec4.setZ(colorTransform.b);\n            if (applyGammaToAlpha) {\n                colorTransform.setRGB(colorAttribute[3], 0, 0, colorSpace);\n                targetVec4.setW(colorTransform.r);\n            }\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedEdgeNodeMaterial.ts\n\n\n\n\nclass ColorableMergedEdgeNodeMaterial extends Nodes/* LineBasicNodeMaterial */.Jde {\n    constructor(colors, param) {\n        super();\n        this.colors = colors;\n        this.isColorableMergedMaterial = true;\n        this.colorConverter = new three_module/* Color */.Ilk();\n        if (colors.getSize() === 0) {\n            throw new Error(`ColorableMergedNodeMaterialには少なくとも1つ以上のTweenableColorが必要です。\n          このMaterialに紐づけられたTweenableColoMapには1つもTweenableColorが登録されていません。`);\n        }\n        this.indexedColors = ColorableMergedBodyNodeMaterial.initColorUniformArray(colors.getSize());\n        this.uniformsColorArray =\n            ColorableMergedBodyNodeMaterial.initUniformsColorArray(this.indexedColors);\n        this.depthWrite = param?.depthWrite ?? true;\n        this.transparent = true;\n        this.colorSpace = param?.colorSpace ?? "srgb";\n        this.applyGammaToAlpha = param?.applyGammaToAlpha ?? false;\n        const colorElement = this.uniformsColorArray.element((0,Nodes/* attribute */.A1o)(ColorableMergedView.MODEL_INDEX));\n        this.colorNode = Nodes/* materialColor */.ujg.mul(colorElement.xyz);\n        this.opacityNode = Nodes/* materialOpacity */.pIc.mul(colorElement.w);\n        colors.setMaterial(this);\n        colors.updateUniformsAll();\n    }\n    /**\n     * 指定されたuniformを更新する。\n     * @param tweenableColor\n     */\n    updateUniform(tweenableColor) {\n        ColorableMergedBodyNodeMaterial.updateUniform(this.colors, tweenableColor, this.indexedColors, this.colorSpace, this.applyGammaToAlpha, this.colorConverter);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/index.ts\n\n\n\n\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/utils/BufferGeometryUtils.js\nvar BufferGeometryUtils = __webpack_require__(993);\n;// CONCATENATED MODULE: ./src/merger/GeometryMerger.ts\n\n\n\n/**\n * ジオメトリのマージを担当するクラス。\n * add, convert, merge の3つの手順でジオメトリをマージする。\n * マージされたジオメトリは、コンストラクタで渡されたObject3Dに返される。\n */\nclass GeometryMerger {\n    constructor(object3D, option) {\n        this.geometries = [];\n        this.object3D = object3D;\n        this.option = option;\n    }\n    async add(geometry, colorMap, index) {\n        const convertedGeometry = await this.convert(geometry);\n        const uniformIndex = colorMap.getUniformIndex(index);\n        const n = readGeometryCount(convertedGeometry);\n        convertedGeometry.setAttribute(ColorableMergedView.MODEL_INDEX, new three_module/* BufferAttribute */.TlE(new Uint16Array(new Array(n).fill(uniformIndex)), 1));\n        this.geometries.push(convertedGeometry);\n    }\n    async convert(geometry) {\n        //Override this method in child class\n        return geometry;\n    }\n    async merge() {\n        if (this.geometries.length === 0) {\n            this.object3D.parent?.remove(this.object3D);\n            return;\n        }\n        this.object3D.geometry = BufferGeometryUtils/* mergeGeometries */.n4(this.geometries);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/merger/BodyGeometryMerger.ts\n\nclass BodyGeometryMerger extends GeometryMerger {\n    async convert(geometry) {\n        geometry.deleteAttribute("uv");\n        return geometry;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/merger/EdgeGeometryMerger.ts\n\n\nclass EdgeGeometryMerger extends GeometryMerger {\n    async convert(geometry) {\n        return new three_module/* EdgesGeometry */.TOt(geometry, this.option.edgeDetail);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/merger/index.ts\n\n\n\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/GenarateModel.ts\n\n\nasync function generateModel(n = 20, type) {\n    type = type ?? "webgl";\n    const option = {\n        bodyOption: { color: [1, 1, 1, 0.2] },\n        edgeOption: { color: [1, 1, 1, 0.8] },\n    };\n    const view = new ColorableMergedView(option);\n    const bodyColors = new TweenableColorMap("colors");\n    const edgeColors = new TweenableColorMap("colors");\n    await addBoxAll(n, view, bodyColors, edgeColors);\n    initMaterial(view, bodyColors, edgeColors, getMaterialConstractors(type));\n    return view;\n}\n/**\n * レンダラーの種類に応じたMaterialクラスを取得\n * @param type\n * @returns\n */\nconst getMaterialConstractors = (type) => {\n    if (type === "webgpu") {\n        return {\n            bodyMaterialClass: ColorableMergedBodyNodeMaterial,\n            edgeMaterialClass: ColorableMergedEdgeNodeMaterial,\n        };\n    }\n    return {\n        bodyMaterialClass: ColorableMergedBodyMaterial,\n        edgeMaterialClass: ColorableMergedEdgeMaterial,\n    };\n};\n/**\n * Boxを指定個数生成、追加する\n * @param n\n * @param view\n * @param bodyColors\n * @param edgeColors\n */\nconst addBoxAll = async (n, view, bodyColors, edgeColors) => {\n    const promises = [];\n    for (let x = 0; x < n; x++) {\n        for (let y = 0; y < n; y++) {\n            for (let z = 0; z < n; z++) {\n                promises.push(addBoxModelAndColor(n, x, y, z, view, bodyColors, edgeColors));\n            }\n        }\n    }\n    await Promise.all(promises);\n    await view.merge();\n};\n/**\n * Boxを1つ生成、追加する\n * @param n\n * @param x\n * @param y\n * @param z\n * @param view\n * @param bodyColors\n * @param edgeColors\n */\nconst addBoxModelAndColor = async (n, x, y, z, view, bodyColors, edgeColors) => {\n    const size = 0.1;\n    const geo = new three_module/* BoxGeometry */.DvJ(size, size, size);\n    const getQuadrant = (i) => {\n        return i < n / 2 ? -1 : 1;\n    };\n    const index = getQuadrant(x) * getQuadrant(y) * getQuadrant(z);\n    const calcPos = (i) => {\n        return (i - n / 2) * (size * 3);\n    };\n    geo.translate(calcPos(x), calcPos(y), calcPos(z));\n    bodyColors.add([1, 1, 1, 0.2], index);\n    edgeColors.add([1, 1, 1, 0.8], index);\n    await view.body?.geometryMerger.add(geo, bodyColors, index);\n    await view.edge?.geometryMerger.add(geo, edgeColors, index);\n};\nconst initMaterial = (view, bodyColors, edgeColors, materialConstractors) => {\n    if (view.body) {\n        view.body.material = new materialConstractors.bodyMaterialClass(bodyColors);\n    }\n    if (view.edge) {\n        view.edge.material = new materialConstractors.edgeMaterialClass(edgeColors);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///209\n')},803:(module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   x: () => (/* binding */ generateScene)\n/* harmony export */ });\n/* unused harmony export generateWebGPUScene */\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(75);\n/* harmony import */ var three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12);\n/* harmony import */ var three_examples_jsm_libs_stats_module_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(304);\n/* harmony import */ var three_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(481);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([three_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_1__]);\nthree_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nconst generateSceneObjects = (type) => {\n    const w = 1280;\n    const h = 720;\n    const scene = new three__WEBPACK_IMPORTED_MODULE_0__/* .Scene */ .xsS();\n    const camera = new three__WEBPACK_IMPORTED_MODULE_0__/* .PerspectiveCamera */ .cPb(45, w / h, 1, 60000);\n    camera.position.set(0, 0, 15);\n    const renderer = type === "webgl"\n        ? new three__WEBPACK_IMPORTED_MODULE_0__/* .WebGLRenderer */ .CP7({ antialias: true })\n        : new three_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z({ antialias: true });\n    renderer.setSize(w, h);\n    renderer.setClearColor(new three__WEBPACK_IMPORTED_MODULE_0__/* .Color */ .Ilk(0x000000));\n    document.body.appendChild(renderer.domElement);\n    const rendererInfo = document.createElement("div");\n    document.body.appendChild(rendererInfo);\n    new three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_2__/* .OrbitControls */ .z(camera, renderer.domElement);\n    const stats = new three_examples_jsm_libs_stats_module_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z();\n    const rendering = () => {\n        stats.begin();\n        if (renderer instanceof three__WEBPACK_IMPORTED_MODULE_0__/* .WebGLRenderer */ .CP7) {\n            renderer.render(scene, camera);\n        }\n        else if (renderer instanceof three_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z) {\n            renderer.renderAsync(scene, camera);\n        }\n        stats.end();\n        rendererInfo.innerText = JSON.stringify(renderer.info.render);\n        requestAnimationFrame(rendering);\n    };\n    rendering();\n    return scene;\n};\nfunction generateScene() {\n    return generateSceneObjects("webgl");\n}\nfunction generateWebGPUScene() {\n    return generateSceneObjects("webgpu");\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXVFO0FBQ007QUFDakI7QUFDdUI7QUFFbkYsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLElBQXdCLEVBQUUsRUFBRTtJQUN4RCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDZixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDZCxNQUFNLEtBQUssR0FBRyxJQUFJLG1EQUFLLEVBQUUsQ0FBQztJQUMxQixNQUFNLE1BQU0sR0FBRyxJQUFJLCtEQUFpQixDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMxRCxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRTlCLE1BQU0sUUFBUSxHQUNaLElBQUksS0FBSyxPQUFPO1FBQ2QsQ0FBQyxDQUFDLElBQUksMkRBQWEsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUN4QyxDQUFDLENBQUMsSUFBSSxzR0FBYyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFOUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLG1EQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUU1QyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDL0MsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRCxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4QyxJQUFJLGdHQUFhLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUUvQyxNQUFNLEtBQUssR0FBRyxJQUFJLHdGQUFLLEVBQUUsQ0FBQztJQUMxQixNQUFNLFNBQVMsR0FBRyxHQUFHLEVBQUU7UUFDckIsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2QsSUFBSSxRQUFRLFlBQVksMkRBQWEsRUFBRSxDQUFDO1lBQ3RDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLENBQUM7YUFBTSxJQUFJLFFBQVEsWUFBWSxzR0FBYyxFQUFFLENBQUM7WUFDOUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEMsQ0FBQztRQUNELEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVaLFlBQVksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlELHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQztJQUNGLFNBQVMsRUFBRSxDQUFDO0lBRVosT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUM7QUFFSyxTQUFTLGFBQWE7SUFDM0IsT0FBTyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRU0sU0FBUyxtQkFBbUI7SUFDakMsT0FBTyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4QyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hc2F0b21ha2luby9jb2xvcmFibGUtbWVyZ2VkLW1vZGVsLy4vZGVtb1NyYy9HZW5lcmF0ZVNjZW5lLnRzP2FjY2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sb3IsIFBlcnNwZWN0aXZlQ2FtZXJhLCBTY2VuZSwgV2ViR0xSZW5kZXJlciB9IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgT3JiaXRDb250cm9scyB9IGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9scy5qc1wiO1xuaW1wb3J0IFN0YXRzIGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vbGlicy9zdGF0cy5tb2R1bGUuanNcIjtcbmltcG9ydCBXZWJHUFVSZW5kZXJlciBmcm9tIFwidGhyZWUvZXhhbXBsZXMvanNtL3JlbmRlcmVycy93ZWJncHUvV2ViR1BVUmVuZGVyZXIuanNcIjtcblxuY29uc3QgZ2VuZXJhdGVTY2VuZU9iamVjdHMgPSAodHlwZTogXCJ3ZWJnbFwiIHwgXCJ3ZWJncHVcIikgPT4ge1xuICBjb25zdCB3ID0gMTI4MDtcbiAgY29uc3QgaCA9IDcyMDtcbiAgY29uc3Qgc2NlbmUgPSBuZXcgU2NlbmUoKTtcbiAgY29uc3QgY2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKDQ1LCB3IC8gaCwgMSwgNjAwMDApO1xuICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDE1KTtcblxuICBjb25zdCByZW5kZXJlciA9XG4gICAgdHlwZSA9PT0gXCJ3ZWJnbFwiXG4gICAgICA/IG5ldyBXZWJHTFJlbmRlcmVyKHsgYW50aWFsaWFzOiB0cnVlIH0pXG4gICAgICA6IG5ldyBXZWJHUFVSZW5kZXJlcih7IGFudGlhbGlhczogdHJ1ZSB9KTtcblxuICByZW5kZXJlci5zZXRTaXplKHcsIGgpO1xuICByZW5kZXJlci5zZXRDbGVhckNvbG9yKG5ldyBDb2xvcigweDAwMDAwMCkpO1xuXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudCk7XG4gIGNvbnN0IHJlbmRlcmVySW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocmVuZGVyZXJJbmZvKTtcbiAgbmV3IE9yYml0Q29udHJvbHMoY2FtZXJhLCByZW5kZXJlci5kb21FbGVtZW50KTtcblxuICBjb25zdCBzdGF0cyA9IG5ldyBTdGF0cygpO1xuICBjb25zdCByZW5kZXJpbmcgPSAoKSA9PiB7XG4gICAgc3RhdHMuYmVnaW4oKTtcbiAgICBpZiAocmVuZGVyZXIgaW5zdGFuY2VvZiBXZWJHTFJlbmRlcmVyKSB7XG4gICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG4gICAgfSBlbHNlIGlmIChyZW5kZXJlciBpbnN0YW5jZW9mIFdlYkdQVVJlbmRlcmVyKSB7XG4gICAgICByZW5kZXJlci5yZW5kZXJBc3luYyhzY2VuZSwgY2FtZXJhKTtcbiAgICB9XG4gICAgc3RhdHMuZW5kKCk7XG5cbiAgICByZW5kZXJlckluZm8uaW5uZXJUZXh0ID0gSlNPTi5zdHJpbmdpZnkocmVuZGVyZXIuaW5mby5yZW5kZXIpO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXJpbmcpO1xuICB9O1xuICByZW5kZXJpbmcoKTtcblxuICByZXR1cm4gc2NlbmU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVTY2VuZSgpIHtcbiAgcmV0dXJuIGdlbmVyYXRlU2NlbmVPYmplY3RzKFwid2ViZ2xcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVdlYkdQVVNjZW5lKCkge1xuICByZXR1cm4gZ2VuZXJhdGVTY2VuZU9iamVjdHMoXCJ3ZWJncHVcIik7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///803\n')},421:(module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n/* harmony import */ var _GenarateModel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(209);\n/* harmony import */ var _GenerateScene_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(803);\n/* harmony import */ var _ColorSwitcher_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(214);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_GenerateScene_js__WEBPACK_IMPORTED_MODULE_1__]);\n_GenerateScene_js__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\nconst onDomContentsLoaded = async () => {\n    const scene = (0,_GenerateScene_js__WEBPACK_IMPORTED_MODULE_1__/* .generateScene */ .x)();\n    const model = await (0,_GenarateModel_js__WEBPACK_IMPORTED_MODULE_0__/* .generateModel */ .B)();\n    scene.add(model);\n    new _ColorSwitcher_js__WEBPACK_IMPORTED_MODULE_2__/* .ColorSwitcher */ .c(model);\n};\nwindow.onload = onDomContentsLoaded;\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIxLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUNtRDtBQUNBO0FBQ0E7QUFFbkQsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLElBQUksRUFBRTtJQUNyQyxNQUFNLEtBQUssR0FBRyx5RUFBYSxFQUFFLENBQUM7SUFDOUIsTUFBTSxLQUFLLEdBQXdCLE1BQU0seUVBQWEsRUFBRSxDQUFDO0lBQ3pELEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakIsSUFBSSxxRUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLEdBQUcsbUJBQW1CLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFzYXRvbWFraW5vL2NvbG9yYWJsZS1tZXJnZWQtbW9kZWwvLi9kZW1vU3JjL2RlbW8udHM/YjZkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2xvcmFibGVNZXJnZWRWaWV3IH0gZnJvbSBcIi4uL3NyYy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2VuZXJhdGVNb2RlbCB9IGZyb20gXCIuL0dlbmFyYXRlTW9kZWwuanNcIjtcbmltcG9ydCB7IGdlbmVyYXRlU2NlbmUgfSBmcm9tIFwiLi9HZW5lcmF0ZVNjZW5lLmpzXCI7XG5pbXBvcnQgeyBDb2xvclN3aXRjaGVyIH0gZnJvbSBcIi4vQ29sb3JTd2l0Y2hlci5qc1wiO1xuXG5jb25zdCBvbkRvbUNvbnRlbnRzTG9hZGVkID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBzY2VuZSA9IGdlbmVyYXRlU2NlbmUoKTtcbiAgY29uc3QgbW9kZWw6IENvbG9yYWJsZU1lcmdlZFZpZXcgPSBhd2FpdCBnZW5lcmF0ZU1vZGVsKCk7XG4gIHNjZW5lLmFkZChtb2RlbCk7XG4gIG5ldyBDb2xvclN3aXRjaGVyKG1vZGVsKTtcbn07XG5cbndpbmRvdy5vbmxvYWQgPSBvbkRvbUNvbnRlbnRzTG9hZGVkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///421\n")}},__webpack_module_cache__={},webpackQueues,webpackExports,webpackError,resolveQueue,deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.m=__webpack_modules__,webpackQueues="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",webpackExports="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",webpackError="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",resolveQueue=Q=>{Q&&Q.d<1&&(Q.d=1,Q.forEach((Q=>Q.r--)),Q.forEach((Q=>Q.r--?Q.r++:Q())))},__webpack_require__.a=(Q,F,U)=>{var B;U&&((B=[]).d=-1);var l,e,b,s=new Set,n=Q.exports,c=new Promise(((Q,F)=>{b=F,e=Q}));c[webpackExports]=n,c[webpackQueues]=Q=>(B&&Q(B),s.forEach(Q),c.catch((Q=>{}))),Q.exports=c,F((Q=>{var F;l=(Q=>Q.map((Q=>{if(null!==Q&&"object"==typeof Q){if(Q[webpackQueues])return Q;if(Q.then){var F=[];F.d=0,Q.then((Q=>{U[webpackExports]=Q,resolveQueue(F)}),(Q=>{U[webpackError]=Q,resolveQueue(F)}));var U={};return U[webpackQueues]=Q=>Q(F),U}}var B={};return B[webpackQueues]=Q=>{},B[webpackExports]=Q,B})))(Q);var U=()=>l.map((Q=>{if(Q[webpackError])throw Q[webpackError];return Q[webpackExports]})),e=new Promise((Q=>{(F=()=>Q(U)).r=0;var e=Q=>Q!==B&&!s.has(Q)&&(s.add(Q),Q&&!Q.d&&(F.r++,Q.push(F)));l.map((Q=>Q[webpackQueues](e)))}));return F.r?e:U()}),(Q=>(Q?b(c[webpackError]=Q):e(n),resolveQueue(B)))),B&&B.d<0&&(B.d=0)},deferred=[],__webpack_require__.O=(Q,F,U,B)=>{if(!F){var l=1/0;for(n=0;n<deferred.length;n++){for(var[F,U,B]=deferred[n],e=!0,b=0;b<F.length;b++)(!1&B||l>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[b])))?F.splice(b--,1):(e=!1,B<l&&(l=B));if(e){deferred.splice(n--,1);var s=U();void 0!==s&&(Q=s)}}return Q}B=B||0;for(var n=deferred.length;n>0&&deferred[n-1][2]>B;n--)deferred[n]=deferred[n-1];deferred[n]=[F,U,B]},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__.j=577,(()=>{var Q={577:0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,U)=>{var B,l,[e,b,s]=U,n=0;if(e.some((F=>0!==Q[F]))){for(B in b)__webpack_require__.o(b,B)&&(__webpack_require__.m[B]=b[B]);if(s)var c=s(__webpack_require__)}for(F&&F(U);n<e.length;n++)l=e[n],__webpack_require__.o(Q,l)&&Q[l]&&Q[l][0](),Q[l]=0;return __webpack_require__.O(c)},U=self.webpackChunk_masatomakino_colorable_merged_model=self.webpackChunk_masatomakino_colorable_merged_model||[];U.forEach(F.bind(null,0)),U.push=F.bind(null,U.push.bind(U))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(421)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();