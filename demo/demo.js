(()=>{"use strict";var __webpack_modules__={321:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n;// CONCATENATED MODULE: ./src/ColorableMergedView.ts\n\n\n/**\n * 色変更が可能なモデル。\n *\n * 半透明なモデルと、エッジの組み合わせで構成される。\n * それぞれに対して、色変更アニメーションができる。\n */\nclass ColorableMergedView extends three_module/* Group */.ZAu {\n    constructor(option) {\n        super();\n        /**\n         * ジオメトリのグループIDを抽出する関数。\n         * セパレーターなどの書式が変わったら、この関数を上書きしてください。\n         *\n         * @param name\n         */\n        this.getGeometryID = (name) => {\n            const match = name.match(/.*_.*_(\\d*)/);\n            if (match == null)\n                throw new Error(`Invalid name: ${name}`);\n            return Number(match[1]);\n        };\n        if (option.bodyOption != null) {\n            this.body = new ColorableMergedBody(option.bodyOption);\n            this.add(this.body);\n        }\n        if (option.edgeOption != null) {\n            this.edge = new ColorableMergedEdge(option.edgeOption);\n            this.add(this.edge);\n        }\n    }\n    async merge() {\n        await Promise.all([\n            this.body?.geometryMerger.merge(),\n            this.edge?.geometryMerger.merge(),\n        ]);\n    }\n}\nColorableMergedView.MODEL_INDEX = "MODEL_INDEX";\n\n;// CONCATENATED MODULE: ./src/ColorableMergedBody.ts\n\n\nclass ColorableMergedBody extends three_module/* Mesh */.Kj0 {\n    constructor(option) {\n        super();\n        this.geometryMerger = new BodyGeometryMerger(this, option);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/ColorableMergedEdge.ts\n\n\nclass ColorableMergedEdge extends three_module/* LineSegments */.ejS {\n    constructor(option) {\n        super();\n        option.edgeDetail = option.edgeDetail ?? 7;\n        this.geometryMerger = new EdgeGeometryMerger(this, option);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/MergedModelUtil.ts\nfunction readGeometryCount(geometry) {\n    return geometry.getAttribute("position").count;\n}\n\n// EXTERNAL MODULE: ./node_modules/@masatomakino/tweenable-color/esm/index.js + 6 modules\nvar esm = __webpack_require__(333);\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(984);\n// EXTERNAL MODULE: ./node_modules/eventemitter3/index.mjs\nvar eventemitter3 = __webpack_require__(146);\n;// CONCATENATED MODULE: ./src/TweenableColorMap.ts\n\n\n\nclass TweenableColorMap extends eventemitter3/* EventEmitter */.v {\n    /**\n     * コンストラクタ\n     * @param uniformName このColorMapが操作するuniform名。ShaderMaterialを継承した場合、マテリアル側に同名のuniformが必要。\n     */\n    constructor(uniformName) {\n        super();\n        this.uniformName = uniformName;\n        this.colors = new Map();\n        esm/* TweenableColorTicker */.k7.start();\n    }\n    setMaterial(material) {\n        this.material = material;\n    }\n    static getColorMapKey(id) {\n        return `${id}`;\n    }\n    add(defaultColor, id) {\n        const tweenableColor = new esm/* TweenableColor */.ZM(defaultColor[0] * 255, defaultColor[1] * 255, defaultColor[2] * 255, defaultColor[3]);\n        this.colors.set(TweenableColorMap.getColorMapKey(id), tweenableColor);\n        tweenableColor.on("onUpdate", () => {\n            this.updateUniform(tweenableColor);\n        });\n    }\n    get(id) {\n        return this.colors.get(TweenableColorMap.getColorMapKey(id));\n    }\n    getUniformIndex(id) {\n        return [...this.colors.keys()].indexOf(TweenableColorMap.getColorMapKey(id));\n    }\n    getUniformIndexFromColor(color) {\n        return [...this.colors.values()].indexOf(color);\n    }\n    getSize() {\n        return this.colors.size;\n    }\n    /**\n     * 指定されたidの色を変更する。\n     * @param id\n     * @param color max 1.0 ~ min 0.0 [r, g, b, a]\n     * @param option\n     */\n    changeColor(color, id, option) {\n        option = option ?? {};\n        option.now ??= performance.now();\n        option.duration ??= 1000;\n        option.easing ??= tween_esm/* Easing */.oY.Cubic.Out;\n        const tweenableColor = this.get(id);\n        tweenableColor?.change(color[0] * 255, color[1] * 255, color[2] * 255, color[3], option.duration, { easing: option.easing, startTime: option.now });\n    }\n    updateUniformsAll() {\n        this.colors.forEach((color) => {\n            this.updateUniform(color);\n        });\n    }\n    /**\n     * このカラーマップに紐づけられたマテリアルのuniformを更新する。\n     * 対象となるuniformは、uniformNameで指定されたもの。\n     *\n     * @param tweenableColor\n     * @private\n     */\n    updateUniform(tweenableColor) {\n        if (this.material == null)\n            return;\n        if ("updateUniform" in this.material) {\n            this.material.updateUniform(tweenableColor);\n            return;\n        }\n        const colorUniform = this.material.uniforms[this.uniformName]\n            .value;\n        if (colorUniform == null) {\n            console.error(`対象のマテリアルに、${this.uniformName}という名前のuniformが存在しません。${this.material.name}のuniform生成処理にこの名前のuniformを追加してください。`);\n            return;\n        }\n        const index = this.getUniformIndexFromColor(tweenableColor);\n        const colorAttribute = tweenableColor.getAttribute();\n        colorUniform[index].set(...colorAttribute);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedMaterial.ts\n\nclass ColorableMergedMaterial extends three_module/* ShaderMaterial */.jyz {\n    constructor(param, colorsLength) {\n        super(param);\n        this.isColorableMergedMaterial = true;\n        this.initDefine = (colorsLength) => {\n            this.defines = {\n                INDEX: colorsLength, // TODO rename to COLORS_LENGTH\n            };\n        };\n        if (colorsLength === 0) {\n            throw new Error(`ColorableMergedMaterialには少なくとも1つ以上のTweenableColorが必要です。\n        このMaterialに紐づけられたTweenableColoMapには1つもTweenableColorが登録されていません。`);\n        }\n        this.isColorableMergedMaterial = true;\n        this.initDefine(colorsLength);\n    }\n    static getColorUniform(colorLength) {\n        const colors = new Array(colorLength)\n            .fill(0)\n            .map(() => new three_module/* Vector4 */.Ltg(1, 1, 1, 0.5));\n        return {\n            colors: { value: colors },\n        };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedBodyMaterial.glsl.ts\n//language=GLSL\nconst vertex = /* glsl */ `\n#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nattribute float MODEL_INDEX;\nvarying float colorTableIndex;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n  \n  colorTableIndex = MODEL_INDEX;\n}\n`;\n//language=GLSL\nconst fragment = /* glsl */ `\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying float colorTableIndex;\nuniform vec4[INDEX] colors;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n  //#include <color_fragment>\n  diffuseColor *= colors[int(colorTableIndex)];\n    \n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n`;\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedBodyMaterial.ts\n\n\n\nclass ColorableMergedBodyMaterial extends ColorableMergedMaterial {\n    constructor(colors, param) {\n        super({\n            vertexShader: vertex,\n            fragmentShader: fragment,\n        }, colors.getSize());\n        this.colors = colors;\n        this.uniforms = ColorableMergedBodyMaterial.getBasicUniforms(colors.getSize());\n        this.transparent = true;\n        this.blending = param?.blending ?? three_module/* NormalBlending */.bdR;\n        this.side = param?.side ?? three_module/* FrontSide */.Wl3;\n        colors.setMaterial(this);\n        colors.updateUniformsAll();\n    }\n    /**\n     * このMaterialに必要なuniformsを生成する。\n     *\n     * @see https://github.com/mrdoob/three.js/blob/0c26bb4bb8220126447c8373154ac045588441de/src/renderers/shaders/ShaderLib.js#L11\n     */\n    static getBasicUniforms(colorsCount) {\n        return three_module/* UniformsUtils */.rDY.merge([\n            three_module/* UniformsLib */.rBU.common,\n            three_module/* UniformsLib */.rBU.specularmap,\n            three_module/* UniformsLib */.rBU.envmap,\n            three_module/* UniformsLib */.rBU.aomap,\n            three_module/* UniformsLib */.rBU.lightmap,\n            three_module/* UniformsLib */.rBU.fog,\n            ColorableMergedMaterial.getColorUniform(colorsCount),\n        ]);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedEdgeMaterial.glsl.ts\n//language=GLSL\nconst ColorableMergedEdgeMaterial_glsl_vertex = /* glsl */ `\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nattribute float MODEL_INDEX;\nvarying float colorTableIndex;\n\nvoid main() {\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n    \n  colorTableIndex = MODEL_INDEX;\n}\n`;\n//language=GLSL\nconst ColorableMergedEdgeMaterial_glsl_fragment = /* glsl */ `\nuniform vec3 diffuse;\nuniform float opacity;\n\nuniform float dashSize;\nuniform float totalSize;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying float colorTableIndex;\nuniform vec4[INDEX] colors;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\n\t\tdiscard;\n\n\t}\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t//#include <color_fragment>\n  diffuseColor *= colors[int(colorTableIndex)];\n    \n  outgoingLight = diffuseColor.rgb; // simple shader\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}\n`;\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedEdgeMaterial.ts\n\n\n\nclass ColorableMergedEdgeMaterial extends ColorableMergedMaterial {\n    constructor(colors, param) {\n        super({\n            vertexShader: ColorableMergedEdgeMaterial_glsl_vertex,\n            fragmentShader: ColorableMergedEdgeMaterial_glsl_fragment,\n        }, colors.getSize());\n        this.colors = colors;\n        this.uniforms = ColorableMergedEdgeMaterial.getBasicUniforms(colors.getSize());\n        this.depthWrite = param?.depthWrite ?? true;\n        this.transparent = true;\n        colors.setMaterial(this);\n        colors.updateUniformsAll();\n    }\n    /**\n     * このMaterialに必要なuniformsを生成する。\n     *\n     * @see https://github.com/mrdoob/three.js/blob/0c26bb4bb8220126447c8373154ac045588441de/src/renderers/shaders/ShaderLib.js#L11\n     */\n    static getBasicUniforms(colorLength) {\n        return three_module/* UniformsUtils */.rDY.merge([\n            three_module/* UniformsLib */.rBU.common,\n            three_module/* UniformsLib */.rBU.fog,\n            {\n                scale: { value: 1 },\n                dashSize: { value: 1 },\n                totalSize: { value: 2 },\n            },\n            ColorableMergedMaterial.getColorUniform(colorLength),\n        ]);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/index.ts\n\n\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/utils/BufferGeometryUtils.js\nvar BufferGeometryUtils = __webpack_require__(993);\n;// CONCATENATED MODULE: ./src/merger/GeometryMerger.ts\n\n\n\n/**\n * ジオメトリのマージを担当するクラス。\n * add, convert, merge の3つの手順でジオメトリをマージする。\n * マージされたジオメトリは、コンストラクタで渡されたObject3Dに返される。\n */\nclass GeometryMerger {\n    constructor(object3D, option) {\n        this.geometries = [];\n        this.object3D = object3D;\n        this.option = option;\n    }\n    async add(geometry, colorMap, index) {\n        const convertedGeometry = await this.convert(geometry);\n        const uniformIndex = colorMap.getUniformIndex(index);\n        const n = readGeometryCount(convertedGeometry);\n        convertedGeometry.setAttribute(ColorableMergedView.MODEL_INDEX, new three_module/* BufferAttribute */.TlE(new Uint16Array(new Array(n).fill(uniformIndex)), 1));\n        this.geometries.push(convertedGeometry);\n    }\n    async convert(geometry) {\n        //Override this method in child class\n        return geometry;\n    }\n    async merge() {\n        if (this.geometries.length === 0) {\n            this.object3D.parent?.remove(this.object3D);\n            return;\n        }\n        this.object3D.geometry = BufferGeometryUtils/* mergeGeometries */.n4(this.geometries);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/merger/BodyGeometryMerger.ts\n\nclass BodyGeometryMerger extends GeometryMerger {\n    async convert(geometry) {\n        geometry.deleteAttribute("uv");\n        return geometry;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/merger/EdgeGeometryMerger.ts\n\n\nclass EdgeGeometryMerger extends GeometryMerger {\n    async convert(geometry) {\n        return new three_module/* EdgesGeometry */.TOt(geometry, this.option.edgeDetail);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/merger/index.ts\n\n\n\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/GenarateModel.ts\n\n\nasync function generateModel(n = 20, type) {\n    type = type ?? "webgl";\n    const option = {\n        bodyOption: { color: [1, 1, 1, 0.2] },\n        edgeOption: { color: [1, 1, 1, 0.8] },\n    };\n    const view = new ColorableMergedView(option);\n    const bodyColors = new TweenableColorMap("colors");\n    const edgeColors = new TweenableColorMap("colors");\n    await addBoxAll(n, view, bodyColors, edgeColors);\n    initMaterial(view, bodyColors, edgeColors, getMaterialConstractors(type));\n    return view;\n}\n/**\n * レンダラーの種類に応じたMaterialクラスを取得\n * @param type\n * @returns\n */\nconst getMaterialConstractors = (type) => {\n    // if (type === "webgpu") {\n    //   return {\n    //     bodyMaterialClass: ColorableMergedBodyNodeMaterial,\n    //     edgeMaterialClass: ColorableMergedEdgeNodeMaterial,\n    //   };\n    // }\n    return {\n        bodyMaterialClass: ColorableMergedBodyMaterial,\n        edgeMaterialClass: ColorableMergedEdgeMaterial,\n    };\n};\n/**\n * Boxを指定個数生成、追加する\n * @param n\n * @param view\n * @param bodyColors\n * @param edgeColors\n */\nconst addBoxAll = async (n, view, bodyColors, edgeColors) => {\n    const promises = [];\n    for (let x = 0; x < n; x++) {\n        for (let y = 0; y < n; y++) {\n            for (let z = 0; z < n; z++) {\n                promises.push(addBoxModelAndColor(n, x, y, z, view, bodyColors, edgeColors));\n            }\n        }\n    }\n    await Promise.all(promises);\n    await view.merge();\n};\n/**\n * Boxを1つ生成、追加する\n * @param n\n * @param x\n * @param y\n * @param z\n * @param view\n * @param bodyColors\n * @param edgeColors\n */\nconst addBoxModelAndColor = async (n, x, y, z, view, bodyColors, edgeColors) => {\n    const size = 0.1;\n    const geo = new three_module/* BoxGeometry */.DvJ(size, size, size);\n    const getQuadrant = (i) => {\n        return i < n / 2 ? -1 : 1;\n    };\n    const index = getQuadrant(x) * getQuadrant(y) * getQuadrant(z);\n    const calcPos = (i) => {\n        return (i - n / 2) * (size * 3);\n    };\n    geo.translate(calcPos(x), calcPos(y), calcPos(z));\n    bodyColors.add([1, 1, 1, 0.2], index);\n    edgeColors.add([1, 1, 1, 0.8], index);\n    await view.body?.geometryMerger.add(geo, bodyColors, index);\n    await view.edge?.geometryMerger.add(geo, edgeColors, index);\n};\nconst initMaterial = (view, bodyColors, edgeColors, materialConstractors) => {\n    if (view.body) {\n        view.body.material = new materialConstractors.bodyMaterialClass(bodyColors);\n    }\n    if (view.edge) {\n        view.edge.material = new materialConstractors.edgeMaterialClass(edgeColors);\n    }\n};\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/libs/stats.module.js\nvar stats_module = __webpack_require__(304);\n;// CONCATENATED MODULE: ./demoSrc/GenerateScene.ts\n\n\n\nconst generateSceneObjects = (type) => {\n    const w = 1280;\n    const h = 720;\n    const scene = new three_module/* Scene */.xsS();\n    const camera = new three_module/* PerspectiveCamera */.cPb(45, w / h, 1, 60000);\n    camera.position.set(0, 0, 15);\n    const renderer = \n    // type === "webgl"\n    new three_module/* WebGLRenderer */.CP7({ antialias: true });\n    renderer.setSize(w, h);\n    renderer.setClearColor(new three_module/* Color */.Ilk(0x000000));\n    document.body.appendChild(renderer.domElement);\n    const rendererInfo = document.createElement("div");\n    document.body.appendChild(rendererInfo);\n    new OrbitControls/* OrbitControls */.z(camera, renderer.domElement);\n    const stats = new stats_module/* default */.Z();\n    const rendering = () => {\n        stats.begin();\n        renderer.render(scene, camera);\n        stats.end();\n        rendererInfo.innerText = JSON.stringify(renderer.info.render);\n        requestAnimationFrame(rendering);\n    };\n    rendering();\n    return scene;\n};\nfunction generateScene() {\n    return generateSceneObjects("webgl");\n}\nfunction generateWebGPUScene() {\n    return generateSceneObjects("webgpu");\n}\n\n;// CONCATENATED MODULE: ./demoSrc/ColorSwitcher.ts\nclass ColorSwitcher {\n    constructor(model) {\n        this.model = model;\n        this.isOn = true;\n        this.switchColor = () => {\n            this.isOn = !this.isOn;\n            const OnBodyColor = [1, 1, 1, 0.2];\n            const OffBodyColor01 = [1, 0, 0, 0.2];\n            const OffBodyColor02 = [0, 1, 0, 0.2];\n            const OnEdgeColor = [1, 1, 1, 0.8];\n            const OffEdgeColor01 = [1, 0, 0, 0.8];\n            const OffEdgeColor02 = [0, 1, 0, 0.8];\n            const bodyMaterial = this.model.body\n                ?.material;\n            bodyMaterial.colors.changeColor(this.isOn ? OnBodyColor : OffBodyColor01, 1);\n            bodyMaterial.colors.changeColor(this.isOn ? OnBodyColor : OffBodyColor02, -1);\n            const edgeMaterial = this.model.edge\n                ?.material;\n            edgeMaterial.colors.changeColor(this.isOn ? OnEdgeColor : OffEdgeColor01, 1);\n            edgeMaterial.colors.changeColor(this.isOn ? OnEdgeColor : OffEdgeColor02, -1);\n        };\n        setInterval(this.switchColor, 3000);\n        this.switchColor();\n    }\n}\n\n;// CONCATENATED MODULE: ./demoSrc/demo.ts\n\n\n\nconst onDomContentsLoaded = async () => {\n    const scene = generateScene();\n    const model = await generateModel();\n    scene.add(model);\n    new ColorSwitcher(model);\n};\nwindow.onload = onDomContentsLoaded;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///321\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,F,U,B)=>{if(!F){var l=1/0;for(c=0;c<deferred.length;c++){for(var[F,U,B]=deferred[c],n=!0,e=0;e<F.length;e++)(!1&B||l>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[e])))?F.splice(e--,1):(n=!1,B<l&&(l=B));if(n){deferred.splice(c--,1);var b=U();void 0!==b&&(Q=b)}}return Q}B=B||0;for(var c=deferred.length;c>0&&deferred[c-1][2]>B;c--)deferred[c]=deferred[c-1];deferred[c]=[F,U,B]},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),(()=>{var Q={577:0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,U)=>{var B,l,[n,e,b]=U,c=0;if(n.some((F=>0!==Q[F]))){for(B in e)__webpack_require__.o(e,B)&&(__webpack_require__.m[B]=e[B]);if(b)var s=b(__webpack_require__)}for(F&&F(U);c<n.length;c++)l=n[c],__webpack_require__.o(Q,l)&&Q[l]&&Q[l][0](),Q[l]=0;return __webpack_require__.O(s)},U=self.webpackChunk_masatomakino_colorable_merged_model=self.webpackChunk_masatomakino_colorable_merged_model||[];U.forEach(F.bind(null,0)),U.push=F.bind(null,U.push.bind(U))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(321)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();