(()=>{"use strict";var __webpack_modules__={419:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n;// CONCATENATED MODULE: ./src/ColorableMergedView.ts\n\n\nclass ColorableMergedView extends three_module/* Group */.ZAu {\n    constructor(option) {\n        super();\n        /**\n         * ジオメトリのグループIDを抽出する関数。\n         * セパレーターなどの書式が変わったら、この関数を上書きしてください。\n         *\n         * @param name\n         */\n        this.getGeometryID = (name) => {\n            const match = name.match(/.*_.*_(\\d*)/);\n            if (match == null)\n                throw new Error(`Invalid name: ${name}`);\n            return Number(match[1]);\n        };\n        if (option.bodyOption != null) {\n            this.body = new ColorableMergedBody(option.bodyOption);\n            this.add(this.body);\n        }\n        if (option.edgeOption != null) {\n            this.edge = new ColorableMergedEdge(option.edgeOption);\n            this.add(this.edge);\n        }\n    }\n    async addGeometry(geometry, id, type) {\n        await Promise.all([\n            this.body?.model.addGeometry(geometry, id, type),\n            this.edge?.model.addGeometry(geometry, id, type),\n        ]);\n    }\n    async merge() {\n        await Promise.all([this.body?.model.merge(), this.edge?.model.merge()]);\n    }\n    changeColor(param) {\n        this.changeColorBodyOrEdge(this.body, param.bodyColor, param);\n        this.changeColorBodyOrEdge(this.edge, param.edgeColor, param);\n    }\n    changeColorBodyOrEdge(target, color, param) {\n        if (color == undefined || target == undefined)\n            return;\n        target.model.colorMap.changeColor(color, param.id, {\n            type: param.type,\n            duration: param.duration,\n            easing: param.easing,\n            now: param.now,\n        });\n    }\n}\nColorableMergedView.MODEL_INDEX = "MODEL_INDEX";\n\n;// CONCATENATED MODULE: ./src/ColorableMergedBody.ts\n\n\nclass ColorableMergedBody extends three_module/* Mesh */.Kj0 {\n    constructor(option) {\n        super();\n        this.model = new MergedBody(this, option);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/ColorableMergedEdge.ts\n\n\nclass ColorableMergedEdge extends three_module/* LineSegments */.ejS {\n    constructor(option) {\n        super();\n        option.edgeDetail = option.edgeDetail ?? 7;\n        this.model = new MergedEdge(this, option);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/MergedModelUtil.ts\nfunction readGeometryCount(geometry) {\n    return geometry.getAttribute("position").count;\n}\n\n// EXTERNAL MODULE: ./node_modules/@masatomakino/tweenable-color/esm/index.js + 6 modules\nvar esm = __webpack_require__(333);\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(984);\n// EXTERNAL MODULE: ./node_modules/eventemitter3/index.mjs\nvar eventemitter3 = __webpack_require__(146);\n;// CONCATENATED MODULE: ./src/TweenableColorMap.ts\n\n\n\nclass TweenableColorMap extends eventemitter3/* EventEmitter */.v {\n    constructor(model) {\n        super();\n        this.model = model;\n        this.colors = new Map();\n        this.needUpdateColors = false;\n        this.onChangedColor = () => {\n            this.needUpdateColors = true;\n        };\n        this.updateColorAttribute = () => {\n            if (!this.needUpdateColors)\n                return;\n            this.needUpdateColors = false;\n            this.forceUpdateColorAttribute();\n        };\n        this.forceUpdateColorAttribute = () => {\n            const mat = this.model.material;\n            let count = 0;\n            this.colors.forEach((value) => {\n                const colorArray = value.getAttribute();\n                mat.setColor(count, colorArray);\n                count++;\n            });\n            this.model.material.needsUpdate = true;\n        };\n        this.model.onBeforeRender = this.updateColorAttribute;\n        esm/* TweenableColorTicker */.k7.start();\n    }\n    static getColorMapKey(id, type = "default") {\n        return `${type}__${id}`;\n    }\n    addColor(defaultColor, id, type) {\n        const color = defaultColor;\n        const tweenableColor = new esm/* TweenableColor */.ZM(color[0] * 255, color[1] * 255, color[2] * 255, color[3]);\n        this.set(tweenableColor, id, type);\n    }\n    set(color, id, type) {\n        this.colors.set(TweenableColorMap.getColorMapKey(id, type), color);\n        color.on("onUpdate", this.onChangedColor);\n    }\n    get(id, type) {\n        return this.colors.get(TweenableColorMap.getColorMapKey(id, type));\n    }\n    getIndex(id, type) {\n        return [...this.colors.keys()].indexOf(TweenableColorMap.getColorMapKey(id, type));\n    }\n    getSize() {\n        return this.colors.size;\n    }\n    /**\n     * 指定されたジオメトリの色を変更する\n     * @param id\n     * @param color\n     * @param option\n     */\n    changeColor(color, id, option) {\n        option = option ?? {};\n        option.now ??= performance.now();\n        option.duration ??= 1000;\n        option.easing ??= tween_esm/* Easing */.oY.Cubic.Out;\n        const tweenableColor = this.get(id, option?.type);\n        tweenableColor?.change(color[0] * 255, color[1] * 255, color[2] * 255, color[3], option.duration, { easing: option.easing, startTime: option.now });\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/IColorableMergedMaterial.ts\n\nclass ColorableMergedMaterial extends three_module/* ShaderMaterial */.jyz {\n    constructor(param, colorsLength) {\n        super(param);\n        this.initDefine = (colorsLength) => {\n            this.defines = {\n                INDEX: colorsLength,\n            };\n        };\n        this.initDefine(colorsLength);\n    }\n    static getColorUniform(colorLength) {\n        const colors = new Array(colorLength)\n            .fill(0)\n            .map(() => new three_module/* Vector4 */.Ltg(1, 1, 1, 0.5));\n        return {\n            colors: { value: colors },\n        };\n    }\n    setColor(index, color) {\n        const colors = this.uniforms.colors.value;\n        colors[index].set(color[0], color[1], color[2], color[3]);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedBodyMaterial.glsl.ts\n//language=GLSL\nconst vertex = /* glsl */ `\n#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nattribute float MODEL_INDEX;\nvarying float colorTableIndex;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n  \n  colorTableIndex = MODEL_INDEX;\n}\n`;\n//language=GLSL\nconst fragment = /* glsl */ `\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying float colorTableIndex;\nuniform vec4[INDEX] colors;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n  //#include <color_fragment>\n  diffuseColor *= colors[int(colorTableIndex)];\n    \n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n`;\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedBodyMaterial.ts\n\n\n\nclass ColorableMergedBodyMaterial extends ColorableMergedMaterial {\n    constructor(colorsLength, param) {\n        super({\n            vertexShader: vertex,\n            fragmentShader: fragment,\n        }, colorsLength);\n        this.uniforms = ColorableMergedBodyMaterial.getBasicUniforms(colorsLength);\n        this.transparent = true;\n        this.blending = param?.blending ?? three_module/* NormalBlending */.bdR;\n        this.side = param?.side ?? three_module/* FrontSide */.Wl3;\n    }\n    /**\n     * このMaterialに必要なuniformsを生成する。\n     *\n     * @see https://github.com/mrdoob/three.js/blob/0c26bb4bb8220126447c8373154ac045588441de/src/renderers/shaders/ShaderLib.js#L11\n     */\n    static getBasicUniforms(colorsCount) {\n        return three_module/* UniformsUtils */.rDY.merge([\n            three_module/* UniformsLib */.rBU.common,\n            three_module/* UniformsLib */.rBU.specularmap,\n            three_module/* UniformsLib */.rBU.envmap,\n            three_module/* UniformsLib */.rBU.aomap,\n            three_module/* UniformsLib */.rBU.lightmap,\n            three_module/* UniformsLib */.rBU.fog,\n            ColorableMergedMaterial.getColorUniform(colorsCount),\n        ]);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedEdgeMaterial.glsl.ts\n//language=GLSL\nconst ColorableMergedEdgeMaterial_glsl_vertex = /* glsl */ `\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nattribute float MODEL_INDEX;\nvarying float colorTableIndex;\n\nvoid main() {\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n    \n  colorTableIndex = MODEL_INDEX;\n}\n`;\n//language=GLSL\nconst ColorableMergedEdgeMaterial_glsl_fragment = /* glsl */ `\nuniform vec3 diffuse;\nuniform float opacity;\n\nuniform float dashSize;\nuniform float totalSize;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying float colorTableIndex;\nuniform vec4[INDEX] colors;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\n\t\tdiscard;\n\n\t}\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t//#include <color_fragment>\n  diffuseColor *= colors[int(colorTableIndex)];\n    \n  outgoingLight = diffuseColor.rgb; // simple shader\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}\n`;\n\n;// CONCATENATED MODULE: ./src/material/ColorableMergedEdgeMaterial.ts\n\n\n\nclass ColorableMergedEdgeMaterial extends ColorableMergedMaterial {\n    constructor(colorLength, param) {\n        super({\n            vertexShader: ColorableMergedEdgeMaterial_glsl_vertex,\n            fragmentShader: ColorableMergedEdgeMaterial_glsl_fragment,\n        }, colorLength);\n        this.uniforms = ColorableMergedEdgeMaterial.getBasicUniforms(colorLength);\n        this.depthWrite = param?.depthWrite ?? true;\n        this.transparent = true;\n    }\n    /**\n     * このMaterialに必要なuniformsを生成する。\n     *\n     * @see https://github.com/mrdoob/three.js/blob/0c26bb4bb8220126447c8373154ac045588441de/src/renderers/shaders/ShaderLib.js#L11\n     */\n    static getBasicUniforms(colorLength) {\n        return three_module/* UniformsUtils */.rDY.merge([\n            three_module/* UniformsLib */.rBU.common,\n            three_module/* UniformsLib */.rBU.fog,\n            {\n                scale: { value: 1 },\n                dashSize: { value: 1 },\n                totalSize: { value: 2 },\n            },\n            ColorableMergedMaterial.getColorUniform(colorLength),\n        ]);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/material/index.ts\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/utils/BufferGeometryUtils.js\nvar BufferGeometryUtils = __webpack_require__(993);\n;// CONCATENATED MODULE: ./src/EdgeWorkerManager.ts\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");\n    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === "m") throw new TypeError("Private method is not writable");\n    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");\n    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");\n    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _a, _EdgeWorkerManager_workerURL, _EdgeWorkerManager_workers;\n\nclass EdgeWorkerManager {\n    static get workerURL() {\n        return __classPrivateFieldGet(_a, _a, "f", _EdgeWorkerManager_workerURL);\n    }\n    static setWorkerURL(url) {\n        if (__classPrivateFieldGet(this, _a, "f", _EdgeWorkerManager_workerURL))\n            throw new Error("Worker URL is already set.");\n        __classPrivateFieldSet(this, _a, url, "f", _EdgeWorkerManager_workerURL);\n        const nativeProcess = window.navigator.hardwareConcurrency ?? 2;\n        for (let i = 0; i < nativeProcess; i++) {\n            const urlString = typeof url === "string" ? url : url.toString();\n            const worker = new Worker(urlString, { name: `edge_${i}` });\n            const workerInstance = {\n                worker,\n                isRunning: false,\n            };\n            __classPrivateFieldGet(this, _a, "f", _EdgeWorkerManager_workers).push(workerInstance);\n            worker.addEventListener("message", (e) => {\n                workerInstance.isRunning = false;\n                this.shiftRequest();\n                this.emitter.emit("response", e.data);\n            });\n        }\n    }\n    static request(geometry, detail) {\n        if (!this.workerURL)\n            return;\n        this.requestStack.push({ geometry, detail });\n        this.shiftRequest();\n    }\n    static shiftRequest() {\n        const suspendedWorkers = __classPrivateFieldGet(this, _a, "f", _EdgeWorkerManager_workers).filter((worker) => !worker.isRunning);\n        if (suspendedWorkers.length === 0)\n            return;\n        suspendedWorkers.forEach((worker) => {\n            const request = this.requestStack.shift();\n            if (!request)\n                return;\n            const message = _a.convertRequestToMessage(request);\n            worker.worker.postMessage(message, [\n                message.position.buffer,\n                message.normal.buffer,\n                message.index.buffer,\n            ]);\n            worker.isRunning = true;\n        });\n    }\n    static convertRequestToMessage(request) {\n        const { geometry, detail } = request;\n        const copyAttribute = (name) => {\n            const attr = geometry.getAttribute(name);\n            return attr.array.slice();\n        };\n        return {\n            position: copyAttribute("position"),\n            normal: copyAttribute("normal"),\n            index: geometry.getIndex().array.slice(),\n            detail,\n            geometryID: geometry.uuid,\n        };\n    }\n}\n_a = EdgeWorkerManager;\n_EdgeWorkerManager_workerURL = { value: void 0 };\n_EdgeWorkerManager_workers = { value: [] };\nEdgeWorkerManager.emitter = new eventemitter3/* default */.Z();\nEdgeWorkerManager.requestStack = [];\n\n;// CONCATENATED MODULE: ./src/MergedModel.ts\n\n\n\n\nclass MergedModel {\n    constructor(object3D, option) {\n        this.geometries = [];\n        this.object3D = object3D;\n        this.option = option;\n        this.colorMap = new TweenableColorMap(object3D);\n    }\n    async addGeometry(geometry, id, type) {\n        this.colorMap.addColor(this.option.color, id, type);\n        const colorMapIndex = this.colorMap.getIndex(id, type);\n        const convertedGeometry = await this.convertGeometry(geometry, colorMapIndex);\n        const n = readGeometryCount(convertedGeometry);\n        convertedGeometry.setAttribute(ColorableMergedView.MODEL_INDEX, new three_module/* BufferAttribute */.TlE(new Uint16Array(new Array(n).fill(colorMapIndex)), 1));\n        this.geometries.push(convertedGeometry);\n    }\n    async convertGeometry(geometry, colorMapIndex) {\n        //Override this method in child class\n        return geometry;\n    }\n    async merge() {\n        if (this.geometries.length === 0)\n            return;\n        this.object3D.geometry = BufferGeometryUtils/* mergeGeometries */.n4(this.geometries);\n        this.createMaterial();\n        this.colorMap.forceUpdateColorAttribute();\n    }\n    createMaterial() {\n        //Override this method in child class\n    }\n}\nclass MergedBody extends MergedModel {\n    createMaterial() {\n        this.object3D.material = new ColorableMergedBodyMaterial(this.colorMap.getSize(), this.option.materialSetting);\n    }\n    async convertGeometry(geometry, colorMapIndex) {\n        geometry.deleteAttribute("uv");\n        return geometry;\n    }\n}\nclass MergedEdge extends MergedModel {\n    createMaterial() {\n        this.object3D.material = new ColorableMergedEdgeMaterial(this.colorMap.getSize(), this.option.materialSetting);\n    }\n    async convertGeometry(geometry, colorMapIndex) {\n        if (!EdgeWorkerManager.workerURL) {\n            return new three_module/* EdgesGeometry */.TOt(geometry, this.option.edgeDetail);\n        }\n        return await MergedEdge.generateEdgeGeometryOnWorker(geometry, this.option.edgeDetail);\n    }\n    static generateEdgeGeometryOnWorker(geometry, edgeDetail) {\n        return new Promise((resolve) => {\n            EdgeWorkerManager.request(geometry, edgeDetail);\n            const onResponse = (e) => {\n                if (e.geometryID === geometry.uuid) {\n                    const geometry = new three_module/* EdgesGeometry */.TOt();\n                    geometry.setAttribute("position", new three_module/* BufferAttribute */.TlE(e.buffer, 3));\n                    EdgeWorkerManager.emitter.off("response", onResponse);\n                    resolve(geometry);\n                }\n            };\n            EdgeWorkerManager.emitter.on("response", onResponse);\n        });\n    }\n}\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/GenarateModel.ts\n\n\nasync function generateModel(n = 20, url) {\n    if (url) {\n        EdgeWorkerManager.setWorkerURL(url);\n    }\n    const view = new ColorableMergedView({\n        bodyOption: { color: [1, 1, 1, 0.2] },\n        edgeOption: { color: [1, 1, 1, 0.8] },\n    });\n    const addModel = async (x, y, z) => {\n        const size = 0.1;\n        const geo = new three_module/* BoxGeometry */.DvJ(size, size, size);\n        const getQuadrant = (i) => {\n            return i < n / 2 ? -1 : 1;\n        };\n        const index = getQuadrant(x) * getQuadrant(y) * getQuadrant(z);\n        const calcPos = (i) => {\n            return (i - n / 2) * (size * 3);\n        };\n        geo.translate(calcPos(x), calcPos(y), calcPos(z));\n        return await view.addGeometry(geo, index);\n    };\n    const promises = [];\n    for (let x = 0; x < n; x++) {\n        for (let y = 0; y < n; y++) {\n            for (let z = 0; z < n; z++) {\n                promises.push(addModel(x, y, z));\n            }\n        }\n    }\n    await Promise.all(promises);\n    view.merge();\n    return view;\n}\n\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/libs/stats.module.js\nvar stats_module = __webpack_require__(304);\n;// CONCATENATED MODULE: ./demoSrc/GenerateScene.ts\n\n\n\nfunction generateScene() {\n    const w = 1280;\n    const h = 720;\n    const scene = new three_module/* Scene */.xsS();\n    const camera = new three_module/* PerspectiveCamera */.cPb(45, w / h, 1, 60000);\n    camera.position.set(0, 0, 15);\n    const renderer = new three_module/* WebGLRenderer */.CP7({ antialias: true });\n    renderer.setSize(w, h);\n    document.body.appendChild(renderer.domElement);\n    const rendererInfo = document.createElement("div");\n    document.body.appendChild(rendererInfo);\n    new OrbitControls/* OrbitControls */.z(camera, renderer.domElement);\n    const stats = new stats_module/* default */.Z();\n    const rendering = () => {\n        stats.begin();\n        renderer.render(scene, camera);\n        stats.end();\n        rendererInfo.innerText = JSON.stringify(renderer.info.render);\n        renderer.render(scene, camera);\n        requestAnimationFrame(rendering);\n    };\n    rendering();\n    return scene;\n}\n\n;// CONCATENATED MODULE: ./demoSrc/ColorSwitcher.ts\nclass ColorSwitcher {\n    constructor(model) {\n        this.model = model;\n        this.isOn = true;\n        this.switchColor = () => {\n            this.isOn = !this.isOn;\n            const OnBodyColor = [1, 1, 1, 0.2];\n            const OffBodyColor01 = [1, 0, 0, 0.2];\n            const OffBodyColor02 = [0, 1, 0, 0.2];\n            const OnEdgeColor = [1, 1, 1, 0.8];\n            const OffEdgeColor01 = [1, 0, 0, 0.8];\n            const OffEdgeColor02 = [0, 1, 0, 0.8];\n            this.model.changeColor({\n                bodyColor: this.isOn ? OnBodyColor : OffBodyColor01,\n                edgeColor: this.isOn ? OnEdgeColor : OffEdgeColor01,\n                id: 1,\n            });\n            this.model.changeColor({\n                bodyColor: this.isOn ? OnBodyColor : OffBodyColor02,\n                edgeColor: this.isOn ? OnEdgeColor : OffEdgeColor02,\n                id: -1,\n            });\n        };\n        setInterval(this.switchColor, 3000);\n        this.switchColor();\n    }\n}\n\n;// CONCATENATED MODULE: ./demoSrc/demo_worker.ts\n\n\n\nconst onDomContentsLoaded = async () => {\n    const scene = generateScene();\n    const model = await generateModel(20, new URL(/* asset import */ __webpack_require__(89), __webpack_require__.b));\n    scene.add(model);\n    new ColorSwitcher(model);\n};\nwindow.onload = onDomContentsLoaded;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///419\n')},89:(Q,F,U)=>{Q.exports=U.p+"5545a4d29a1c8908e26b.js"}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,F,U,B)=>{if(!F){var e=1/0;for(c=0;c<deferred.length;c++){for(var[F,U,B]=deferred[c],l=!0,s=0;s<F.length;s++)(!1&B||e>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[s])))?F.splice(s--,1):(l=!1,B<e&&(e=B));if(l){deferred.splice(c--,1);var n=U();void 0!==n&&(Q=n)}}return Q}B=B||0;for(var c=deferred.length;c>0&&deferred[c-1][2]>B;c--)deferred[c]=deferred[c-1];deferred[c]=[F,U,B]},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),(()=>{var Q;__webpack_require__.g.importScripts&&(Q=__webpack_require__.g.location+"");var F=__webpack_require__.g.document;if(!Q&&F&&(F.currentScript&&(Q=F.currentScript.src),!Q)){var U=F.getElementsByTagName("script");if(U.length)for(var B=U.length-1;B>-1&&!Q;)Q=U[B--].src}if(!Q)throw new Error("Automatic publicPath is not supported in this browser");Q=Q.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=Q})(),(()=>{__webpack_require__.b=document.baseURI||self.location.href;var Q={415:0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,U)=>{var B,e,[l,s,n]=U,c=0;if(l.some((F=>0!==Q[F]))){for(B in s)__webpack_require__.o(s,B)&&(__webpack_require__.m[B]=s[B]);if(n)var b=n(__webpack_require__)}for(F&&F(U);c<l.length;c++)e=l[c],__webpack_require__.o(Q,e)&&Q[e]&&Q[e][0](),Q[e]=0;return __webpack_require__.O(b)},U=self.webpackChunk_masatomakino_colorable_merged_model=self.webpackChunk_masatomakino_colorable_merged_model||[];U.forEach(F.bind(null,0)),U.push=F.bind(null,U.push.bind(U))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(419)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();